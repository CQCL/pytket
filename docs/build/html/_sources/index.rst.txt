pytket
======

.. image:: CQCLogo.png
   :width: 120px
   :align: right

``pytket`` is a python module for interfacing with `CQC`_ tket, a set of quantum
programming tools. We currently support circuits and device architectures from
Google `Cirq`_, IBM `Qiskit`_, `AQT`_, `Honeywell`_, Amazon `Braket`_,
`QSharp`_, `Pyzx`_, `ProjectQ`_, `Qulacs`_, Rigetti `pyQuil`_ and `IonQ`_, allowing the tket tools
to be used in conjunction with projects on these platforms.

``pytket`` is available for Python 3.6, 3.7 and 3.8, on Linux, MacOS and Windows.
To install, run

``pip install pytket``

.. note::   There is a `known issue <https://github.com/CQCL/pytket/issues/24>`_
    with symbolic circuits on Windows, which is under investigation. Until this
    is fixed we do not recommend running pytket on Windows if you are using
    symbolics.

To use ``pytket``, you can simply import the appropriate modules into your python code or in an interactive Python notebook. We can build circuits directly using the ``pytket`` interface by creating a blank circuit and adding gates in the order we want to apply them.

::

    from pytket import Circuit
    c = Circuit(2,2) # define a circuit with 2 qubits and 2 bits
    c.H(0)           # add a Hadamard gate to qubit 0
    c.Rz(0.25, 0)    # add an Rz gate of angle 0.25*pi to qubit 0
    c.CX(1,0)        # add a CX gate with control qubit 1 and target qubit 0
    c.measure_all()  # measure qubits 0 and 1, recording the results in bits 0 and 1

Some of the extension modules define :py:class:`Backend` s, allowing the circuits to be run on simulators or real quantum hardware. For example, ``pytket-qiskit`` grants access to the :py:class:`AerBackend` simulator which can sample from measurements.

::

    from pytket.backends.ibm import AerBackend
    b = AerBackend()                # connect to the backend
    b.compile_circuit(c)            # compile the circuit to satisfy the backend's requirements
    handle = b.process_circuit(c, 100)  # submit the job to run the circuit 100 times
    counts = b.get_counts(handle)   # retrieve and summarise the results
    print(counts)

This prints out a summary of readouts (the final values of the classical bits) and their frequencies.

::

    {(0, 0): 49, (1, 0): 51}

See the `Getting Started`_ page for a basic tutorial on using
``pytket``. To get more in depth on features, see the `examples`_.

Extensions
~~~~~~~~~~

To use pytket in conjunction with other platforms you must download an
additional separate module for each. Each one of these adds either some new
methods to the ``pytket`` package to convert between the circuit
representations, or some new backends to submit circuits to within ``pytket``.

For each extension module:

Qiskit: ``pip install pytket-qiskit``

Cirq: ``pip install pytket-cirq``

PyQuil: ``pip install pytket-pyquil``

ProjectQ: ``pip install pytket-projectq``

AQT: ``pip install pytket-aqt``

Honeywell: ``pip install pytket-honeywell``

Braket: ``pip install pytket-braket``

QSharp: ``pip install pytket-qsharp``

PyZX: ``pip install pytket-pyzx``

Qulacs: ``pip install pytket-qulacs``

IonQ: ``pip install pytket-ionq``

How to cite
~~~~~~~~~~~

If you wish to cite tket in any academic publications, we generally recommend citing our `software overview paper <https://doi.org/10.1088/2058-9565/ab8e92>`_ for most cases.

If your work is on the topic of specific compilation tasks, it may be more appropriate to cite one of our other papers:

- `"On the qubit routing problem" <https://doi.org/10.4230/LIPIcs.TQC.2019.5>`_ for qubit placement (aka allocation, mapping) and routing (aka swap network insertion, connectivity solving).
- `"Phase Gadget Synthesis for Shallow Circuits" <https://doi.org/10.4204/EPTCS.318.13>`_ for representing exponentiated Pauli operators in the ZX calculus and their circuit decompositions.
- `"A Generic Compilation Strategy for the Unitary Coupled Cluster Ansatz" <https://arxiv.org/abs/2007.10515>`_ for sequencing of terms in Trotterisation and Pauli diagonalisation.

We are also keen for others to benchmark their compilation techniques against us. We recommend checking our `benchmark repository <https://github.com/CQCL/tket_benchmarking>`_ for examples on how to run basic benchmarks with the latest version of ``pytket``. Please list the release version of ``pytket`` with any benchmarks you give, and feel free to get in touch for any assistance needed in setting up fair and representative tests.

User Support
~~~~~~~~~~~~

If you have problems with the use of tket or you think that you have found a bug there are several ways to contact us:

- You can join the `tket-users mailing list <https://list.cambridgequantum.com/cgi-bin/mailman/listinfo/tket-users>`_. If you have questions or ideas and wishes for new features you can send an email to the list and ask for help. You can also join the list to get the newest information and get in contact with other users of tket.
- Write an email to tket-support@cambridgequantum.com and ask for help with your problem.
- You can write a bug report on the `CQC github <https://github.comCQCL/pytket/issues>`_ with details of the problem and we will pick that up. You can also have a look on that page so see if your problem has already been reported by someone else.

We are really thankful for all help to fix bugs in tket. Usually you will get an answer from someone in the development team of tket soon.

LICENCE
~~~~~~~

Copyright 2020-2021 Cambridge Quantum Computing

You may not use this product except in compliance with the Licence.
You may view a copy of the Licence on the `LICENCE`_ page.

Telemetry Data Policy
~~~~~~~~~~~~~~~~~~~~~

Our telemetry data policy can be viewed in the `Telemetry Data Policy`_ page.

.. _Cirq: https://www.github.com/quantumlib/cirq
.. _Qiskit: https://qiskit.org
.. _AQT: https://www.aqt.eu/services/
.. _Honeywell: https://www.honeywell.com/en-us/company/quantum
.. _Braket: https://aws.amazon.com/braket/
.. _QSharp: https://docs.microsoft.com/en-us/quantum/
.. _Pyzx: https://github.com/Quantomatic/pyzx
.. _ProjectQ: https://github.com/ProjectQ-Framework/ProjectQ
.. _pyQuil: http://rigetti.com/forest
.. _Qulacs: https://docs.qulacs.org/en/latest/index.html
.. _Getting Started: getting_started.html
.. _examples: https://github.com/CQCL/pytket/blob/master/examples
.. _source: https://github.com/Quantomatic/pyzx
.. _LICENCE: licence.html
.. _CQC: https://cambridgequantum.com
.. _IonQ: https://ionq.com/
.. _Telemetry Data Policy: telemetry_data_policy.html

.. |PyPI version| image:: https://badge.fury.io/py/pytket.svg
   :target: https://badge.fury.io/py/pytket
.. |Documentation Status| image:: https://readthedocs.org/projects/pytket/badge/?version=latest
   :target: https://pytket.readthedocs.io/en/latest/?badge=latest

.. toctree::
    :caption: Contents:
    :maxdepth: 1

    getting_started.rst
    changelog.rst
    install.rst
    licence.rst
    telemetry_data_policy.rst
    opensource.rst

.. toctree::
    :caption: User Manual:
    :maxdepth: 2

    manual_intro.rst
    manual_circuit.rst
    manual_backend.rst
    manual_compiler.rst
    manual_noise.rst

.. toctree::
    :caption: API Reference:
    :maxdepth: 2

    backends.rst
    circuit.rst
    pauli.rst
    device.rst
    passes.rst
    predicates.rst
    program.rst
    partition.rst
    qasm.rst
    quipper.rst
    routing.rst
    transform.rst
    utils.rst
    logging.rst

.. toctree::
    :caption: Specific extensions:
    :maxdepth: 2

    extensions/aqt.rst
    extensions/braket.rst
    extensions/cirq.rst
    extensions/honeywell.rst
    extensions/projectq.rst
    extensions/pyquil.rst
    extensions/pyzx.rst
    extensions/qiskit.rst
    extensions/qsharp.rst
    extensions/qulacs.rst
    extensions/ionq.rst

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
